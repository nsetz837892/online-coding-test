/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GuestImport } from './routes/_guest'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as GuestLoginImport } from './routes/_guest/login'
import { Route as AuthenticatedLogoutRouteImport } from './routes/_authenticated/logout/route'
import { Route as AuthenticatedForbiddenIndexImport } from './routes/_authenticated/forbidden/index'
import { Route as AuthenticatedExpensesIndexImport } from './routes/_authenticated/expenses/index'
import { Route as AuthenticatedExpensesAddExpenseRouteImport } from './routes/_authenticated/expenses/add-expense/route'

// Create/Update Routes

const GuestRoute = GuestImport.update({
  id: '/_guest',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/index.lazy').then((d) => d.Route),
)

const GuestLoginRoute = GuestLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRoute,
} as any)

const AuthenticatedLogoutRouteRoute = AuthenticatedLogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedForbiddenIndexRoute =
  AuthenticatedForbiddenIndexImport.update({
    id: '/forbidden/',
    path: '/forbidden/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedExpensesIndexRoute = AuthenticatedExpensesIndexImport.update(
  {
    id: '/expenses/',
    path: '/expenses/',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
).lazy(() =>
  import('./routes/_authenticated/expenses/index.lazy').then((d) => d.Route),
)

const AuthenticatedExpensesAddExpenseRouteRoute =
  AuthenticatedExpensesAddExpenseRouteImport.update({
    id: '/expenses/add-expense',
    path: '/expenses/add-expense',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/logout': {
      id: '/_authenticated/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthenticatedLogoutRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginImport
      parentRoute: typeof GuestImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/expenses/add-expense': {
      id: '/_authenticated/expenses/add-expense'
      path: '/expenses/add-expense'
      fullPath: '/expenses/add-expense'
      preLoaderRoute: typeof AuthenticatedExpensesAddExpenseRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/expenses/': {
      id: '/_authenticated/expenses/'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof AuthenticatedExpensesIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/forbidden/': {
      id: '/_authenticated/forbidden/'
      path: '/forbidden'
      fullPath: '/forbidden'
      preLoaderRoute: typeof AuthenticatedForbiddenIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedLogoutRouteRoute: typeof AuthenticatedLogoutRouteRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedExpensesAddExpenseRouteRoute: typeof AuthenticatedExpensesAddExpenseRouteRoute
  AuthenticatedExpensesIndexRoute: typeof AuthenticatedExpensesIndexRoute
  AuthenticatedForbiddenIndexRoute: typeof AuthenticatedForbiddenIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedLogoutRouteRoute: AuthenticatedLogoutRouteRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedExpensesAddExpenseRouteRoute:
    AuthenticatedExpensesAddExpenseRouteRoute,
  AuthenticatedExpensesIndexRoute: AuthenticatedExpensesIndexRoute,
  AuthenticatedForbiddenIndexRoute: AuthenticatedForbiddenIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface GuestRouteChildren {
  GuestLoginRoute: typeof GuestLoginRoute
}

const GuestRouteChildren: GuestRouteChildren = {
  GuestLoginRoute: GuestLoginRoute,
}

const GuestRouteWithChildren = GuestRoute._addFileChildren(GuestRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof GuestRouteWithChildren
  '/logout': typeof AuthenticatedLogoutRouteRoute
  '/login': typeof GuestLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/expenses/add-expense': typeof AuthenticatedExpensesAddExpenseRouteRoute
  '/expenses': typeof AuthenticatedExpensesIndexRoute
  '/forbidden': typeof AuthenticatedForbiddenIndexRoute
}

export interface FileRoutesByTo {
  '': typeof GuestRouteWithChildren
  '/logout': typeof AuthenticatedLogoutRouteRoute
  '/login': typeof GuestLoginRoute
  '/': typeof AuthenticatedIndexRoute
  '/expenses/add-expense': typeof AuthenticatedExpensesAddExpenseRouteRoute
  '/expenses': typeof AuthenticatedExpensesIndexRoute
  '/forbidden': typeof AuthenticatedForbiddenIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_guest': typeof GuestRouteWithChildren
  '/_authenticated/logout': typeof AuthenticatedLogoutRouteRoute
  '/_guest/login': typeof GuestLoginRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/expenses/add-expense': typeof AuthenticatedExpensesAddExpenseRouteRoute
  '/_authenticated/expenses/': typeof AuthenticatedExpensesIndexRoute
  '/_authenticated/forbidden/': typeof AuthenticatedForbiddenIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/logout'
    | '/login'
    | '/'
    | '/expenses/add-expense'
    | '/expenses'
    | '/forbidden'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/logout'
    | '/login'
    | '/'
    | '/expenses/add-expense'
    | '/expenses'
    | '/forbidden'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_guest'
    | '/_authenticated/logout'
    | '/_guest/login'
    | '/_authenticated/'
    | '/_authenticated/expenses/add-expense'
    | '/_authenticated/expenses/'
    | '/_authenticated/forbidden/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  GuestRoute: typeof GuestRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  GuestRoute: GuestRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/_guest"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/logout",
        "/_authenticated/",
        "/_authenticated/expenses/add-expense",
        "/_authenticated/expenses/",
        "/_authenticated/forbidden/"
      ]
    },
    "/_guest": {
      "filePath": "_guest.tsx",
      "children": [
        "/_guest/login"
      ]
    },
    "/_authenticated/logout": {
      "filePath": "_authenticated/logout/route.tsx",
      "parent": "/_authenticated"
    },
    "/_guest/login": {
      "filePath": "_guest/login.tsx",
      "parent": "/_guest"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/expenses/add-expense": {
      "filePath": "_authenticated/expenses/add-expense/route.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/expenses/": {
      "filePath": "_authenticated/expenses/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/forbidden/": {
      "filePath": "_authenticated/forbidden/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
