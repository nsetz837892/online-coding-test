/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../../router/routes/__root'
import { Route as GuestImport } from './../../router/routes/_guest'
import { Route as AuthetnicatedImport } from './../../router/routes/_authetnicated'
import { Route as GuestLoginImport } from './../../router/routes/_guest/login'

// Create/Update Routes

const GuestRoute = GuestImport.update({
  id: '/_guest',
  getParentRoute: () => rootRoute,
} as any)

const AuthetnicatedRoute = AuthetnicatedImport.update({
  id: '/_authetnicated',
  getParentRoute: () => rootRoute,
} as any)

const GuestLoginRoute = GuestLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authetnicated': {
      id: '/_authetnicated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthetnicatedImport
      parentRoute: typeof rootRoute
    }
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestImport
      parentRoute: typeof rootRoute
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginImport
      parentRoute: typeof GuestImport
    }
  }
}

// Create and export the route tree

interface GuestRouteChildren {
  GuestLoginRoute: typeof GuestLoginRoute
}

const GuestRouteChildren: GuestRouteChildren = {
  GuestLoginRoute: GuestLoginRoute,
}

const GuestRouteWithChildren = GuestRoute._addFileChildren(GuestRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof GuestRouteWithChildren
  '/login': typeof GuestLoginRoute
}

export interface FileRoutesByTo {
  '': typeof GuestRouteWithChildren
  '/login': typeof GuestLoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authetnicated': typeof AuthetnicatedRoute
  '/_guest': typeof GuestRouteWithChildren
  '/_guest/login': typeof GuestLoginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login'
  id: '__root__' | '/_authetnicated' | '/_guest' | '/_guest/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthetnicatedRoute: typeof AuthetnicatedRoute
  GuestRoute: typeof GuestRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthetnicatedRoute: AuthetnicatedRoute,
  GuestRoute: GuestRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authetnicated",
        "/_guest"
      ]
    },
    "/_authetnicated": {
      "filePath": "_authetnicated.tsx"
    },
    "/_guest": {
      "filePath": "_guest.tsx",
      "children": [
        "/_guest/login"
      ]
    },
    "/_guest/login": {
      "filePath": "_guest/login.tsx",
      "parent": "/_guest"
    }
  }
}
ROUTE_MANIFEST_END */
